#!/usr/bin/python
# -*- coding: utf8 -*-
#Golden information compare

__author__ = 'Tan Ying<ying.tan@tcl.com>' 

import os
import sys
import shutil
import getopt
import commands
from xml.etree import ElementTree
from utils import *

#logger = log.getLogging('fai')
if not os.path.exists(config.BIN_DIR):
    os.mkdir(config.BIN_DIR)
# elif not os.path.isfile(config.LOG_FILE):
#     os.mknod(config.LOG_FILE)

def pull_by_apk(cfile):

    if is_pull_aready('golden_collection.flag'):
        os.system('%s pull /sdcard/golden_collection.txt %s' % (ADB_PATH, cfile))
        os.system('%s uninstall com.tcl.goldencompare' % ADB_PATH)
        os.system('%s shell rm -f /data/local/tmp/goldencompare.apk' % ADB_PATH)
        os.system('%s shell rm -f /sdcard/golden_collection.flag' % ADB_PATH)
        os.system('%s shell rm -f /sdcard/golden_collection.txt' % ADB_PATH)
    else:
        pull_by_apk(cfile)

def pull_info_from_phone(is_golden, path):
    if is_golden:
        property_file = path + GOLDEN_PROPERTY
        collection_file = path + GOLDEN_COLLECTION
        unconnected_hint = HINT_UNCONNECTED_USB % 'Golden'
        success_hint = HINT_PULL_SUCCESS % 'Golden'
    else:
        property_file = path + SAMPLE_PROPERTY
        collection_file = path + SAMPLE_COLLECTION
        unconnected_hint = HINT_UNCONNECTED_USB % 'Sample'
        success_hint = HINT_PULL_SUCCESS % 'Sample'

    command = '%s shell getprop > %s' % (ADB_PATH, property_file)

    if OS_TYPE == 'Windows':
        os.system(command)
        os.system('%s install %s' % (ADB_PATH, APK_PATH))
        os.system('%s shell am start -n com.tcl.goldencompare/.MainActivity' % ADB_PATH)

        pull_by_apk(collection_file)

        show(success_hint)
    else:
        status, output = commands.getstatusoutput(command)
        print status

        if status == 0:
            os.system('%s install %s' % (ADB_PATH, APK_PATH))
            os.system('%s shell am start -n com.tcl.goldencompare/.MainActivity' % ADB_PATH)

            pull_by_apk(collection_file)

            show(success_hint)
        else:
            show(unconnected_hint)
            #restart server
            try:
                is_exit = write(HINT_RAW_INPUT)
            except (EOFError,KeyboardInterrupt):
                show(HINT_RAW_INPUT_EXIT)
            else:
                if is_exit:
                    os.system('adb kill-server')
                    os.system('adb start-server')
                    pull_info_from_phone(is_golden, path)
                else:
                    sys.exit(1)

def parse_collection_txt(file, white_dict):
    fdict = {}

    sdict = {}
    rdict = {}

    settings_whitelist = white_dict['settings']
    ringtone_whitelist = white_dict['ringtone']

    f = open(file, 'r')
    flist = f.readlines()
    f.close()

    key = ''
    count = 0
    for item in flist:
        mod = count % 2
        if mod == 0:
            if item[:len(SETTINGS_KEY_TAG)] == SETTINGS_KEY_TAG:
                key = filter_xml_tag(SETTINGS_KEY_TAG, item)
            elif item[:len(RINGTONE_KEY_TAG)] == RINGTONE_KEY_TAG:
                key = filter_xml_tag(RINGTONE_KEY_TAG, item)
        else:
            if item[:len(SETTINGS_VAL_TAG)] == SETTINGS_VAL_TAG:
                if is_key_in_whitelist(key, settings_whitelist):
                    pass
                else:
                    val = filter_xml_tag(SETTINGS_VAL_TAG, item)
                    sdict[key] = val
            elif item[:len(RINGTONE_VAL_TAG)] == RINGTONE_VAL_TAG:
                if is_key_in_whitelist(key, ringtone_whitelist):
                    pass
                else:
                    val = filter_xml_tag(RINGTONE_VAL_TAG, item)
                    rdict[key] = val

        count += 1

    fdict['settings'] = sdict
    fdict['ringtone'] = rdict
    return fdict

def get_filepath(argv_list):
    cmd = argv_list[1]

    if len(argv_list) == 2:
        path = BIN_DIR
        if cmd == '-c':
            if (not os.path.isfile(path + GOLDEN_PROPERTY)) or (not os.path.isfile(path + GOLDEN_COLLECTION)):
                show(ERROR_FILE_NOT_EXIST)
                sys.exit(1)
    elif len(argv_list) >= 3:
        path = argv_list[2]

        if path[-1] != '/':
            path += '/'

        if cmd == '-p':
            if not os.path.exists(path):
                show(ERROR_DIR_NOT_EXIST)
                sys.exit(1)
        elif cmd == '-c':
            if (not os.path.isfile(path + GOLDEN_PROPERTY)) or (not os.path.isfile(path + GOLDEN_COLLECTION)):
                show(ERROR_FILE_NOT_EXIST)
                sys.exit(1)
    return path

def main():
    argv_len = len(sys.argv)
    if argv_len < 2:
        show(HINT_LACK_PARAMETER)
    elif argv_len >= 2:
        cmd = sys.argv[1]
        path = get_filepath(sys.argv)
        #pull golden info 
        if cmd == '-p': 
            pull_info_from_phone(True, path)

        elif cmd == '-c':
            pull_info_from_phone(False, path)

            white_dict = json.loads(WHITELIST_PATH)

            diff_dict = {}
            #system property comparation
            sysprop_golden_dict = change_file_to_dict(path + GOLDEN_PROPERTY, white_dict)
            sysprop_sample_dict = change_file_to_dict(path + SAMPLE_PROPERTY, white_dict)
            sysprop_diff_dict = run_comparation(sysprop_golden_dict, sysprop_sample_dict)
            #setting comparation
            collection_golden_dict = parse_collection_txt(path + GOLDEN_COLLECTION, white_dict)
            collection_sample_dict = parse_collection_txt(path + SAMPLE_COLLECTION, white_dict)

            settings_golden_dict = collection_golden_dict['settings']
            settings_sample_dict = collection_sample_dict['settings']
            settings_diff_dict = run_comparation(settings_golden_dict, settings_sample_dict)

            #ringtone comparation
            ringtone_golden_dict = collection_golden_dict['ringtone']
            ringtone_sample_dict = collection_sample_dict['ringtone']
            ringtone_diff_dict = run_comparation(ringtone_golden_dict, ringtone_sample_dict)

            #contacts comapration(TODO Later)

            diff_dict['sysprop'] = sysprop_diff_dict
            diff_dict['settings'] = settings_diff_dict
            diff_dict['ringtone'] = ringtone_diff_dict
            output_diff_to_file(diff_dict, OUTPUT_DIR + PROPERTY_COMPARE_RESULT)
        else:
            show(HINT_INVALID_PARAMETER)

if __name__ == '__main__':
    main()